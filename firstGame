using System;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int userPositionY = 1;
            int userPositionX = 1;
            int score = 0;
            char[,] map = {{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'A', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                           {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' } };

            while (score == 0)
            {
                GetUserPosition(ref map, ref userPositionX, ref userPositionY, ref score);
            }

            Console.WriteLine("U WON");
        }

        static void ChangeUserPosition(char[,] map,ref  int userPositionX,ref  int userPositionY, int newUserPostionX, int newUserPositionY)
        {
            char wallSymbol = '#';
            char freeMapSpaceSymbol = ' ';

            if (map[newUserPositionY, newUserPostionX] != wallSymbol)
            {
                map[userPositionY, userPositionX] = freeMapSpaceSymbol;
                userPositionY = newUserPositionY;
                userPositionX = newUserPostionX;
            }
        }

        static void GetUserPosition(ref char[,] map, ref int userPositionX, ref int userPositionY, ref int score)
        {
            DrawMap(map, userPositionY, userPositionX);
            ConsoleKeyInfo key = Console.ReadKey();
            char wallSymbol = '#';
            char freeMapSpaceSymbol = ' ';

            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    ChangeUserPosition(map, ref userPositionX,ref  userPositionY, userPositionX, userPositionY - 1);
                    break;
                case ConsoleKey.DownArrow:
                    ChangeUserPosition(map, ref userPositionX, ref userPositionY, userPositionX, userPositionY + 1);
                    break;
                case ConsoleKey.RightArrow:
                    ChangeUserPosition(map, ref userPositionX, ref userPositionY, userPositionX + 1, userPositionY);
                    break;
                case ConsoleKey.LeftArrow:
                    ChangeUserPosition(map, ref userPositionX, ref userPositionY, userPositionX - 1, userPositionY);
                    break;
            }

            if (map[userPositionY, userPositionX] != wallSymbol || map[userPositionY, userPositionX] != freeMapSpaceSymbol)
            {
                score += GetItem(map[userPositionY, userPositionX]);
            }

            Console.Clear();
        }

        static int GetItem(char item)
        {
            if (item == 'A')
            {
                return 1;
            }

            else return 0;
        }

        static void DrawMap(char[,] map, int userPositionY, int userPositionX)
        {
            map[userPositionY, userPositionX] = '@';

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }
                Console.Write("\n");
            }
        }
    }
}
